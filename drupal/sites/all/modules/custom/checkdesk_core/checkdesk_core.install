<?php

/**
 * Implements hook_enable().
 */
function checkdesk_core_enable() {
  // Resize "uri" column on "file_managed" table
  checkdesk_core_update_7018();
}

/**
 * Implements hook_schema().
 */
function checkdesk_core_schema() {
  $schema['checkdesk_reports_updates'] = array(
    'description' => 'The base table to associate reports with updates.',
    'fields' => array(
      'update_nid' => array('type' => 'int', 'length' => 10 , 'unsigned' => TRUE,  'not null' => TRUE),
      'report_nid' => array('type' => 'int', 'length' => 10 , 'unsigned' => TRUE,  'not null' => TRUE),
    ),
    'primary key' => array('update_nid', 'report_nid'),
  );
  return $schema;
}

/**
 * Implements hook_requirements().
 */
function checkdesk_core_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if ($phase == 'runtime') {
    // Verify that the Facebook application keys are set.
    $requirements['facebook_keys'] = array('title' => $t('Facebook application keys'));
    $fboauth_id = variable_get('fboauth_id', NULL);
    $fboauth_secret = variable_get('fboauth_secret', NULL);
    if (!($fboauth_id && $fboauth_secret)) {
      $requirements['facebook_keys']['value'] = $t('Missing');
      $requirements['facebook_keys']['description'] =
        $t('In order to interact with Facebook, you need to create an application at ' .
           '<a href="https://developers.facebook.com/apps" target="_blank">Facebook Developers</a> ' .
           'and set the generated application keys at the ' .
           '<a href="/admin/config/people/fboauth">Facebook OAuth settings page</a>.');
      $requirements['facebook_keys']['severity'] = REQUIREMENT_WARNING;
    }
    else {
      $requirements['facebook_keys']['value'] = $t('Configured');
      $requirements['facebook_keys']['severity'] = REQUIREMENT_OK;
    }
  }
  return $requirements;

}

/**
 * Implements hook_update_N().
 * Enable remember me and change checkdesk_core weight
 */
function checkdesk_core_update_7001() {
  //change module weight to get twitter_signin alteration
  db_update('system')
    ->fields(array(
      'weight' => 5,
    ))
    ->condition('name', 'checkdesk_core')
    ->execute();
}

/**
 * Implements hook_update_N().
 * Remove duplicate "administer links" show in dropdown (issue #924)
 */
function checkdesk_core_update_7004() {
  $query = db_select('menu_links', 'ml');
  $query->condition('ml.link_path', 'admin/people');
  $query->condition('ml.link_title', 'administer users');
  $query->fields('ml', array('mlid'));
  $mlid = $query->execute()->fetchField();
  menu_link_delete($mlid);
}

/**
 * Implements hook_update_N().
 * Enable needed modules.
 */
function checkdesk_core_update_7005() {
  module_enable(array('locale', 'l10n_update'));
  $languages = language_list();
  if (!isset($languages['ar'])) {
    locale_add_language('ar');
  }
}

/**
 * Implements hook_update_N().
 * Enable needed modules.
 */
function checkdesk_core_update_7007() {
  module_enable(array('i18n_menu', 'varnish', 'i18n_field'));
}

/**
 * Implements hook_update_N().
 * Enable needed modules.
 */
function checkdesk_core_update_7010() {
  module_enable(array('translation', 'i18n_menu_link_uuid'));
}

/**
 * Install the IFE module settings.
 */
function checkdesk_core_update_7014() {
  checkdesk_core_ensure_ife_settings();
}

/**
 * Enable the featured stories feature.
 */
function checkdesk_core_update_7016() {
  module_enable(array('checkdesk_featured_stories_feature'));
}

/**
 * Implements hook_update_N().
 * Fixes #1861 on Mantis, by resizing "uri" column on "file_managed" table
 */
function checkdesk_core_update_7018() {
  db_query("ALTER TABLE {file_managed} DROP KEY uri"); // Drop the `uri` index
  db_query("ALTER TABLE {file_managed} MODIFY uri VARCHAR(1024) COLLATE utf8_bin"); // Resize the column
  db_query("CREATE UNIQUE INDEX uri ON {file_managed} (uri(255))"); // Recreate the index without exceeding the InnoDB index size
  db_query("ALTER TABLE {file_managed} ENGINE=innodb"); // Rebuild the index
  // Resize file name issue #3302
  db_query("ALTER TABLE {file_managed} MODIFY filename VARCHAR(1024)");
}

/**
 * Implements hook_update_N().
 * Revert "uri" to utf8_bin collation.
 */
function checkdesk_core_update_7019() {
  db_query("ALTER TABLE {file_managed} MODIFY uri VARCHAR(1024) COLLATE utf8_bin"); // Resize the column
  db_query("ALTER TABLE {file_managed} ENGINE=innodb"); // Rebuild the index
}

/**
 * Change alias for existing content.
 * Issue #1932
 */
function checkdesk_core_update_7023() {
  //Update alias for story content.
  db_query("INSERT INTO {url_alias} (source, alias, language) ( SELECT CONCAT('node/', nid) as source, CONCAT('story/', nid) as alias, language FROM {node} WHERE type = 'discussion')");
  //Update alias for report content.
  db_query("INSERT INTO {url_alias} (source, alias, language) ( SELECT CONCAT('node/', nid) as source, CONCAT('report/', nid) as alias, language FROM {node} WHERE type = 'media')");
  //Update alias for update content.
  db_query("INSERT INTO {url_alias} (source, alias, language) ( SELECT CONCAT('node/', nid) as source, CONCAT('update/', nid) as alias, language FROM {node} WHERE type = 'post')");
}

/**
 * Update alias language to be 'und'
 */
function checkdesk_core_update_7025() {
  db_update('url_alias')
    ->fields(array(
      'language' => 'und',
    ))
    ->execute();
}

/**
 * Update l10n_update settings
 */
function checkdesk_core_update_7026() {
  variable_set('l10n_update_download_store', 'sites/all/translations');
  variable_set('l10n_update_check_mode', '2');
}

/**
 * Remove deleted comments from heartbeat activity.
 */
function checkdesk_core_update_7028() {
  $query = db_select('heartbeat_activity', 'ha');
  $query->addField('ha', 'uaid');
  $query->leftJoin('comment', 'c', 'ha.cid = c.cid');
  $query->condition('ha.cid', 0, '!=');
  $query->condition('c.cid', NULL, 'IS');
  foreach ($query->execute() as $row_object) {
    $uaids[] = $row_object->uaid;
  }
  if (!empty($uaids)) {
    heartbeat_activity_delete($uaids);
  }
}

/**
 * Create table for log updates_reports.
 */
function checkdesk_core_update_7029() {
  $schema = checkdesk_core_schema();
  db_create_table('checkdesk_reports_updates', $schema['checkdesk_reports_updates']);
}

/**
 * Log existing updates and reports.
 */
function checkdesk_core_update_7030() {
  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->addField('fdb', 'body_value');
  $query->join('field_data_body', 'fdb', 'n.nid = fdb.entity_id');
  $query->condition('n.type', 'post');
  $result = $query->execute()->fetchAll();
  $data = array();
  foreach ($result as $row) {
    $matches = $reports = array();
    preg_match_all('/\[[^:]+:([0-9]+)\]/u', $row->body_value, $matches);
    if (count($matches[1])) {
      foreach ($matches[1] as $key => $nid) {
        if(!in_array($nid, $reports)) {
          $reports[] = $nid;
          $data[] = array('update_nid' =>$row->nid, 'report_nid' => $nid);
        }
      }
    }
  }
  if (count($data)) {
    $query = db_insert('checkdesk_reports_updates')->fields(array('update_nid', 'report_nid'));
    foreach ($data as $record) {
      $query->values($record);
    }
    $query->execute();
  }
}

/**
 * Remove old revisions.
 */
function checkdesk_core_update_7031() {
  $nids = db_query('SELECT nid FROM {node_revision} GROUP BY nid HAVING COUNT(nid) > 1')->fetchCol();
  foreach (node_load_multiple($nids) as $node) {
    // Delete sub revisions.
    foreach (node_revision_list($node) as $vid => $revision) {
      node_revision_delete($vid);
    }
  }
}

/**
 * Uninstall recaptcha modules.
*/
function checkdesk_core_update_7032() {
  drupal_uninstall_modules(array('recaptcha'), FALSE);
  drupal_uninstall_modules(array('captcha'), FALSE);
}

/**
 * Enable auto-approved for some partners.
 */
function checkdesk_core_update_7033() {
  $hostnames = variable_get('hostnames', array());
  $auto_approved = array('qa.checkdesk.org', '7iber.checkdesk.org', 'weladelbalad.checkdesk.org', 'maan.checkdesk.org', 'smex.checkdesk.org');
  $result = array_intersect($hostnames, $auto_approved);
  if (count($result)) {
    variable_set('user_register', USER_REGISTER_VISITORS);
  }
  else {
    variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
  }
}

/**
 * Disable and uninstall checkdesk_tour
 */
function checkdesk_core_update_7034() {
  $module_list = array('checkdesk_tour');
  module_disable($module_list);
  drupal_uninstall_modules($module_list, FALSE);
}

/**
 * Resizing "filename" column on "file_managed" table
 */
function checkdesk_core_update_7035() {
  db_query("ALTER TABLE {file_managed} MODIFY filename VARCHAR(1024)");
}

/**
 * Rename usernames by stripping their "_{uid}" part.
 */
function checkdesk_core_update_7036() {
  $users = db_query("
    SELECT uid, name
    FROM {users}
    WHERE name
    REGEXP '^[[:alnum:]_-]+_[[:digit:]]+$'
    ")->fetchAll();
  foreach ($users as $user) {
    $user->name = preg_replace('/^([\\w_-]+)_[\\d]+$/', '$1', $user->name);
    // Check if new name already exist on DB
    $exist = db_query('SELECT COUNT(uid) FROM {users} WHERE name = :name', array(':name' => $user->name))->fetchField();
    if (!$exist) {
      db_query("
        UPDATE {users}
        SET name = :name
        WHERE uid = :uid
        ", array(
          ':name' => $user->name,
          ':uid' => $user->uid,
        ));
    }
  }
}

/**
 * Disable and uninstall services module
 */
function checkdesk_core_update_7037() {
  $module_list = array('services_views', 'services');
  module_disable($module_list, FALSE);
  drupal_uninstall_modules($module_list, FALSE);
}

/**
 * Enable save draft - stories
 */
function checkdesk_core_update_7038() {
  variable_set('save_draft_enabled_discussion', 1);
}

/**
 * Fix URLs in heartbeat messages that were fomratted before patching filter module to support "@" in URLs
 * @param type $sandbox
 */
function checkdesk_core_update_7039(&$sandbox) {
  if(!isset($sandbox['progress'])){
    $sandbox['progress'] = 0;
    $sandbox['last_uaid'] = 0;
    $sandbox['limit'] = 400;
    $sandbox['max'] = db_query('
        SELECT COUNT(uaid) FROM {heartbeat_activity}
        WHERE message_id = :message_id AND variables LIKE :term
        ', array(':message_id' => 'new_comment_report', ':term' =>'%/</a>@%'))->fetchField();
  }
  $result = db_query_range('
    SELECT uaid, variables, ha.nid, ha.uid, ha.nid_target, ha.cid , u.name, n.title
    FROM {heartbeat_activity} ha
    INNER JOIN {node} n ON ha.nid = n.nid
    INNER JOIN {users} u ON ha.uid = u.uid
    WHERE message_id = :message_id AND variables LIKE :term AND uaid > :uaid
    ',0, $sandbox['limit'], array(
      ':message_id' => 'new_comment_report',
      ':term' => '%/</a>@%',
      ':uaid' => $sandbox['last_uaid']
    )
  );

  foreach ($result as $row) {
    if ($row->cid != 0) {
      $variables = heartbeat_decode_message_variables($row->variables);
      $comment = comment_load($row->cid);
      if (array_key_exists('!comment', $variables)) {
        $variables['!comment'] = check_markup($comment->comment_body[LANGUAGE_NONE][0]['value'], $comment->comment_body[LANGUAGE_NONE][0]['format']);
        db_query('UPDATE {heartbeat_activity} SET variables = :variables WHERE uaid = :uaid'
                , array(':variables' => heartbeat_encode_message_variables($variables), ':uaid' => $row->uaid));
      }
    }
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  $sandbox['last_uaid'] = $row->uaid;
}

/**
 * Set collaboration alias for existing stories
 */
function checkdesk_core_update_7040() {
  // Set collaboration alias for existing stories
  db_query("INSERT INTO {url_alias} (source, alias, language) ( SELECT CONCAT('node/', nid, '/collaboration') as source, CONCAT('story/', nid, '/collaboration') as alias, 'und' FROM {node} WHERE type = 'discussion')");
}

/**
 * Disable views_autocomplete_filters
 */
function checkdesk_core_update_7041() {
  module_disable(array('views_autocomplete_filters'));
}

/**
 * Update body format for stories to be liveblog
 */
function checkdesk_core_update_7042() {
  db_query(
    'UPDATE {field_data_body} set body_format = :format  WHERE bundle = :type'
    , array(':format' => 'liveblog', ':type' => 'discussion')
  );
  db_query(
    'UPDATE {field_revision_body} set body_format = :format  WHERE bundle = :type'
    , array(':format' => 'liveblog', ':type' => 'discussion')
  );
}