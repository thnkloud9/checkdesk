<?php

/**
 * Implementation of hook_menu().
 *
 * curl -H "Content-Type: application/json" -X POST -d '@tweet.json' http://checkdesk.local/en/api/v1/bot
 */
function checkdesk_bot_menu() {
  return array(
    'api/v1/bot' => array(
      'title' => 'Checky',
      'page callback' => 'checkdesk_bot_response',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'admin/config/services/checkdesk-bot' => array(
      'title' => 'Checkdesk Bot',
      'description' => 'Administer Checkdesk bot configuration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('checkdesk_bot__admin_settings'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    ),
  );
}

/**
 * JSON endpoint for bot.
 * @see http://www.drupalconnect.com/blog/articles/programming-restful-endpoints-accept-post-drupal
 */
function checkdesk_bot_response() {
  $input = file_get_contents("php://input",  TRUE);
  $json = drupal_json_decode($input, TRUE);
  $signature = checkdesk_bot__generate_signature($input);
  if ($signature != $_SERVER['HTTP_X_CHECKY_SIGNATURE']) {
    watchdog('checkdesk_bot', 'Bad X-Checky-Signature: Expected !mine and received !theirs.', array(
      '!mine' => $signature,
      '!theirs' => empty($_SERVER['HTTP_X_CHECKY_SIGNATURE']) ? '(blank)' : $_SERVER['HTTP_X_CHECKY_SIGNATURE'],
    ), WATCHDOG_ERROR);
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_json_output(array('error' => array('message' => 'Bad X-Checky-Signature')));
    return;
  }
  $reply = checkdesk_bot__generate_response($json['tweet']);
  drupal_json_output(array('reply' => $reply));
}

/**
 * Generate sha1 signature.
 * @see https://developer.github.com/webhooks/securing/
 */
function checkdesk_bot__generate_signature($json) {
  return 'sha1=' . hash_hmac('sha1', $json, variable_get('checkdesk_bot_secret_token', ''));
}

/**
 * Main function for generating bot response.
 */
function checkdesk_bot__generate_response($tweet) {
  // Find Drupal username of sender if any.
  $sender = NULL;
  $sender_uid = db_query(
    "SELECT uid FROM {twitter_account} WHERE twitter_uid = :twitter_id",
    array('twitter_id' => $tweet['user']['id_str'])
  )->fetchField();
  if (!empty($sender_uid)) {
    $sender = user_load($sender_uid);
  }

  // Decide on reply language.
  // TODO: take into account Twitter user's preferences, Checkdesk user preferences, browser settings, etc.
  global $language;
  $languages = language_list();
  $langcode = empty($tweet['lang']) || $tweet['lang'] === 'und' || empty($languages[$tweet['lang']]) ? $language->language : $tweet['lang'];

  // Detect URL if any.
  if (1 === count($tweet['entities']['urls'])) {
    $report_url = !empty($tweet['entities']['urls'][0]['expanded_url']) ?
      $tweet['entities']['urls'][0]['expanded_url'] :
      $tweet['entities']['urls'][0]['url'];
  }
  else if (1 < count($tweet['entities']['urls'])) {
    // Tell user we can only parse a single URL and exit.
    return t(
      '!screen_name sorry, I can only understand a single URL to import. ' .
      'We don\'t want to lose your contributions! Please adjust and resend :-)',
      array(
        '!screen_name' => '@' . $tweet['user']['screen_name'],
      ),
      array(
        'langcode' => $langcode,
      )
    );
  }
  else { // 1 > count($tweet['entities']['urls'])
    return t(
      '!screen_name sorry, I need a URL to import. ' .
      'We don\'t want to lose your contributions! Please adjust and resend :-)',
      array(
        '!screen_name' => '@' . $tweet['user']['screen_name'],
      ),
      array(
        'langcode' => $langcode,
      )
    );
  }

  // Detect duplicate URL.
  if ($duplicates = checkdesk_bot__duplicates($report_url)) {
    // TODO Tell user about duplicates and exit.
  }

  // Detect story hashtag if any.
  $story_nid = NULL;
  if ($stories = checkdesk_bot__detect_stories($tweet['entities']['hashtags'])) {
    // Silently take first matching story.
    $story_nid = $stories[0];
  }

  // If not found, generate a URL to the report form.
  if (empty($sender_uid)) {
    return t(
      '!screen_name thanks! You can visit !site_name to submit your report: !url',
      array(
        '!screen_name' => '@' . $tweet['user']['screen_name'],
        '!site_name' => variable_get('site_name', t('Checkdesk')),
        '!url' => url('node/add/media', array('query' => array('url' => $report_url), 'absolute' => TRUE)),
      ),
      array(
        'langcode' => $langcode,
      )
    );
  }

  // Otherwise, import the report on behalf of the sender and generate a reply.
  // TODO Handle report creation failure.
  $report = checkdesk_bot__import_report($report_url, $sender_uid, $story_nid, $tweet);

  return t(
    '!screen_name thanks! You can access your report here: !url',
    array(
      '!screen_name' => '@' . $tweet['user']['screen_name'],
      '!site_name' => variable_get('site_name', t('Checkdesk')),
      '!url' => url('node/' . $report->nid, array('absolute' => TRUE)),
    ),
    array(
      'langcode' => $langcode,
    )
  );
}

function checkdesk_bot__detect_stories($hashtags) {
  // TODO Match each hashtag to the field_hashtag of a story and return nids of matching stories.
  return array();
}

function checkdesk_bot__duplicates($report_url) {
  // TODO Match $report_url with existing ones and return matching report nodes. Remember to normalize URL.
  return array();
}

function checkdesk_bot__import_report($report_url, $sender_uid, $story_nid, $tweet) {
  $report = new StdClass;
  $report->type = 'media';
  node_object_prepare($report);
  $report->status = 1;
  $report->title = ''; // auto_nodetitle should take care of that
  $report->language = LANGUAGE_NONE;
  $report->uid = $sender_uid;
  $report->field_link[LANGUAGE_NONE][]['url'] = $report_url;
  if (!empty($story_nid)) {
    $report->field_stories[LANGUAGE_NONE][]['target_id'] = $story_nid;
  }
  if ($report = node_submit($report)) {
    node_save($report);
    return $report;
  }
  return FALSE;
}

function checkdesk_bot__admin_settings() {
  $form['checkdesk_bot_secret_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret token'),
    '#description' => t('This token is shared with the Checkdesk Bot process in order to communicate securely.'),
    '#default_value' => variable_get('checkdesk_bot_secret_token'),
  );
  return system_settings_form($form);
}
